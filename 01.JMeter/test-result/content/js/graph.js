/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 60.0, "minX": 0.0, "maxY": 2910.0, "series": [{"data": [[0.0, 60.0], [0.1, 69.0], [0.2, 80.0], [0.3, 100.0], [0.4, 121.0], [0.5, 127.0], [0.6, 129.0], [0.7, 141.0], [0.8, 150.0], [0.9, 158.0], [1.0, 173.0], [1.1, 183.0], [1.2, 200.0], [1.3, 211.0], [1.4, 214.0], [1.5, 225.0], [1.6, 240.0], [1.7, 249.0], [1.8, 260.0], [1.9, 274.0], [2.0, 279.0], [2.1, 291.0], [2.2, 297.0], [2.3, 302.0], [2.4, 309.0], [2.5, 318.0], [2.6, 324.0], [2.7, 331.0], [2.8, 346.0], [2.9, 350.0], [3.0, 356.0], [3.1, 366.0], [3.2, 375.0], [3.3, 380.0], [3.4, 392.0], [3.5, 400.0], [3.6, 412.0], [3.7, 419.0], [3.8, 428.0], [3.9, 446.0], [4.0, 453.0], [4.1, 462.0], [4.2, 468.0], [4.3, 475.0], [4.4, 478.0], [4.5, 486.0], [4.6, 489.0], [4.7, 494.0], [4.8, 498.0], [4.9, 501.0], [5.0, 511.0], [5.1, 516.0], [5.2, 532.0], [5.3, 551.0], [5.4, 560.0], [5.5, 580.0], [5.6, 586.0], [5.7, 597.0], [5.8, 613.0], [5.9, 618.0], [6.0, 645.0], [6.1, 658.0], [6.2, 668.0], [6.3, 687.0], [6.4, 700.0], [6.5, 730.0], [6.6, 751.0], [6.7, 775.0], [6.8, 780.0], [6.9, 806.0], [7.0, 814.0], [7.1, 832.0], [7.2, 852.0], [7.3, 891.0], [7.4, 911.0], [7.5, 926.0], [7.6, 939.0], [7.7, 953.0], [7.8, 971.0], [7.9, 986.0], [8.0, 1009.0], [8.1, 1021.0], [8.2, 1036.0], [8.3, 1048.0], [8.4, 1061.0], [8.5, 1096.0], [8.6, 1121.0], [8.7, 1136.0], [8.8, 1156.0], [8.9, 1179.0], [9.0, 1192.0], [9.1, 1206.0], [9.2, 1220.0], [9.3, 1230.0], [9.4, 1234.0], [9.5, 1244.0], [9.6, 1267.0], [9.7, 1284.0], [9.8, 1293.0], [9.9, 1314.0], [10.0, 1328.0], [10.1, 1351.0], [10.2, 1363.0], [10.3, 1370.0], [10.4, 1383.0], [10.5, 1387.0], [10.6, 1400.0], [10.7, 1411.0], [10.8, 1419.0], [10.9, 1426.0], [11.0, 1440.0], [11.1, 1444.0], [11.2, 1449.0], [11.3, 1458.0], [11.4, 1466.0], [11.5, 1470.0], [11.6, 1479.0], [11.7, 1487.0], [11.8, 1495.0], [11.9, 1506.0], [12.0, 1512.0], [12.1, 1527.0], [12.2, 1532.0], [12.3, 1538.0], [12.4, 1545.0], [12.5, 1550.0], [12.6, 1554.0], [12.7, 1561.0], [12.8, 1563.0], [12.9, 1569.0], [13.0, 1571.0], [13.1, 1575.0], [13.2, 1579.0], [13.3, 1581.0], [13.4, 1584.0], [13.5, 1587.0], [13.6, 1591.0], [13.7, 1593.0], [13.8, 1596.0], [13.9, 1598.0], [14.0, 1601.0], [14.1, 1604.0], [14.2, 1606.0], [14.3, 1607.0], [14.4, 1609.0], [14.5, 1613.0], [14.6, 1614.0], [14.7, 1616.0], [14.8, 1619.0], [14.9, 1620.0], [15.0, 1622.0], [15.1, 1624.0], [15.2, 1626.0], [15.3, 1628.0], [15.4, 1629.0], [15.5, 1631.0], [15.6, 1632.0], [15.7, 1634.0], [15.8, 1636.0], [15.9, 1639.0], [16.0, 1641.0], [16.1, 1643.0], [16.2, 1645.0], [16.3, 1646.0], [16.4, 1647.0], [16.5, 1649.0], [16.6, 1652.0], [16.7, 1654.0], [16.8, 1656.0], [16.9, 1657.0], [17.0, 1658.0], [17.1, 1658.0], [17.2, 1660.0], [17.3, 1661.0], [17.4, 1662.0], [17.5, 1663.0], [17.6, 1665.0], [17.7, 1666.0], [17.8, 1668.0], [17.9, 1669.0], [18.0, 1670.0], [18.1, 1672.0], [18.2, 1673.0], [18.3, 1675.0], [18.4, 1677.0], [18.5, 1678.0], [18.6, 1679.0], [18.7, 1681.0], [18.8, 1682.0], [18.9, 1683.0], [19.0, 1684.0], [19.1, 1685.0], [19.2, 1686.0], [19.3, 1688.0], [19.4, 1690.0], [19.5, 1691.0], [19.6, 1693.0], [19.7, 1693.0], [19.8, 1694.0], [19.9, 1696.0], [20.0, 1697.0], [20.1, 1698.0], [20.2, 1699.0], [20.3, 1699.0], [20.4, 1701.0], [20.5, 1703.0], [20.6, 1703.0], [20.7, 1704.0], [20.8, 1705.0], [20.9, 1706.0], [21.0, 1707.0], [21.1, 1708.0], [21.2, 1710.0], [21.3, 1710.0], [21.4, 1711.0], [21.5, 1712.0], [21.6, 1712.0], [21.7, 1713.0], [21.8, 1714.0], [21.9, 1716.0], [22.0, 1716.0], [22.1, 1716.0], [22.2, 1717.0], [22.3, 1718.0], [22.4, 1719.0], [22.5, 1720.0], [22.6, 1721.0], [22.7, 1722.0], [22.8, 1722.0], [22.9, 1724.0], [23.0, 1724.0], [23.1, 1725.0], [23.2, 1725.0], [23.3, 1726.0], [23.4, 1727.0], [23.5, 1728.0], [23.6, 1729.0], [23.7, 1729.0], [23.8, 1730.0], [23.9, 1730.0], [24.0, 1731.0], [24.1, 1732.0], [24.2, 1733.0], [24.3, 1734.0], [24.4, 1735.0], [24.5, 1735.0], [24.6, 1735.0], [24.7, 1736.0], [24.8, 1737.0], [24.9, 1738.0], [25.0, 1739.0], [25.1, 1740.0], [25.2, 1741.0], [25.3, 1741.0], [25.4, 1742.0], [25.5, 1743.0], [25.6, 1744.0], [25.7, 1744.0], [25.8, 1745.0], [25.9, 1745.0], [26.0, 1746.0], [26.1, 1747.0], [26.2, 1747.0], [26.3, 1749.0], [26.4, 1749.0], [26.5, 1750.0], [26.6, 1750.0], [26.7, 1751.0], [26.8, 1753.0], [26.9, 1753.0], [27.0, 1754.0], [27.1, 1755.0], [27.2, 1756.0], [27.3, 1757.0], [27.4, 1757.0], [27.5, 1758.0], [27.6, 1758.0], [27.7, 1759.0], [27.8, 1759.0], [27.9, 1761.0], [28.0, 1761.0], [28.1, 1762.0], [28.2, 1763.0], [28.3, 1763.0], [28.4, 1764.0], [28.5, 1764.0], [28.6, 1765.0], [28.7, 1766.0], [28.8, 1766.0], [28.9, 1767.0], [29.0, 1767.0], [29.1, 1768.0], [29.2, 1769.0], [29.3, 1769.0], [29.4, 1770.0], [29.5, 1771.0], [29.6, 1772.0], [29.7, 1773.0], [29.8, 1773.0], [29.9, 1774.0], [30.0, 1774.0], [30.1, 1775.0], [30.2, 1775.0], [30.3, 1776.0], [30.4, 1777.0], [30.5, 1777.0], [30.6, 1778.0], [30.7, 1779.0], [30.8, 1779.0], [30.9, 1779.0], [31.0, 1780.0], [31.1, 1780.0], [31.2, 1781.0], [31.3, 1781.0], [31.4, 1782.0], [31.5, 1782.0], [31.6, 1783.0], [31.7, 1784.0], [31.8, 1785.0], [31.9, 1786.0], [32.0, 1786.0], [32.1, 1787.0], [32.2, 1787.0], [32.3, 1788.0], [32.4, 1788.0], [32.5, 1789.0], [32.6, 1789.0], [32.7, 1790.0], [32.8, 1791.0], [32.9, 1791.0], [33.0, 1792.0], [33.1, 1792.0], [33.2, 1793.0], [33.3, 1794.0], [33.4, 1795.0], [33.5, 1795.0], [33.6, 1796.0], [33.7, 1796.0], [33.8, 1797.0], [33.9, 1798.0], [34.0, 1799.0], [34.1, 1799.0], [34.2, 1800.0], [34.3, 1801.0], [34.4, 1802.0], [34.5, 1802.0], [34.6, 1802.0], [34.7, 1803.0], [34.8, 1804.0], [34.9, 1804.0], [35.0, 1805.0], [35.1, 1805.0], [35.2, 1806.0], [35.3, 1807.0], [35.4, 1807.0], [35.5, 1808.0], [35.6, 1808.0], [35.7, 1808.0], [35.8, 1809.0], [35.9, 1810.0], [36.0, 1810.0], [36.1, 1811.0], [36.2, 1811.0], [36.3, 1812.0], [36.4, 1812.0], [36.5, 1813.0], [36.6, 1814.0], [36.7, 1815.0], [36.8, 1815.0], [36.9, 1816.0], [37.0, 1816.0], [37.1, 1816.0], [37.2, 1817.0], [37.3, 1817.0], [37.4, 1818.0], [37.5, 1818.0], [37.6, 1819.0], [37.7, 1819.0], [37.8, 1819.0], [37.9, 1820.0], [38.0, 1821.0], [38.1, 1822.0], [38.2, 1822.0], [38.3, 1823.0], [38.4, 1823.0], [38.5, 1824.0], [38.6, 1824.0], [38.7, 1825.0], [38.8, 1825.0], [38.9, 1826.0], [39.0, 1826.0], [39.1, 1827.0], [39.2, 1827.0], [39.3, 1828.0], [39.4, 1828.0], [39.5, 1829.0], [39.6, 1830.0], [39.7, 1830.0], [39.8, 1831.0], [39.9, 1832.0], [40.0, 1833.0], [40.1, 1834.0], [40.2, 1834.0], [40.3, 1835.0], [40.4, 1835.0], [40.5, 1836.0], [40.6, 1837.0], [40.7, 1837.0], [40.8, 1838.0], [40.9, 1838.0], [41.0, 1839.0], [41.1, 1839.0], [41.2, 1840.0], [41.3, 1841.0], [41.4, 1841.0], [41.5, 1842.0], [41.6, 1842.0], [41.7, 1842.0], [41.8, 1843.0], [41.9, 1843.0], [42.0, 1844.0], [42.1, 1845.0], [42.2, 1846.0], [42.3, 1846.0], [42.4, 1847.0], [42.5, 1847.0], [42.6, 1847.0], [42.7, 1848.0], [42.8, 1849.0], [42.9, 1850.0], [43.0, 1850.0], [43.1, 1851.0], [43.2, 1851.0], [43.3, 1852.0], [43.4, 1852.0], [43.5, 1853.0], [43.6, 1853.0], [43.7, 1853.0], [43.8, 1854.0], [43.9, 1854.0], [44.0, 1856.0], [44.1, 1856.0], [44.2, 1857.0], [44.3, 1857.0], [44.4, 1858.0], [44.5, 1859.0], [44.6, 1859.0], [44.7, 1860.0], [44.8, 1860.0], [44.9, 1861.0], [45.0, 1862.0], [45.1, 1862.0], [45.2, 1863.0], [45.3, 1863.0], [45.4, 1864.0], [45.5, 1865.0], [45.6, 1865.0], [45.7, 1866.0], [45.8, 1866.0], [45.9, 1866.0], [46.0, 1867.0], [46.1, 1867.0], [46.2, 1868.0], [46.3, 1868.0], [46.4, 1869.0], [46.5, 1869.0], [46.6, 1870.0], [46.7, 1871.0], [46.8, 1871.0], [46.9, 1872.0], [47.0, 1872.0], [47.1, 1873.0], [47.2, 1873.0], [47.3, 1874.0], [47.4, 1875.0], [47.5, 1875.0], [47.6, 1876.0], [47.7, 1876.0], [47.8, 1877.0], [47.9, 1878.0], [48.0, 1879.0], [48.1, 1880.0], [48.2, 1880.0], [48.3, 1880.0], [48.4, 1881.0], [48.5, 1882.0], [48.6, 1882.0], [48.7, 1882.0], [48.8, 1883.0], [48.9, 1883.0], [49.0, 1884.0], [49.1, 1885.0], [49.2, 1885.0], [49.3, 1886.0], [49.4, 1886.0], [49.5, 1886.0], [49.6, 1887.0], [49.7, 1888.0], [49.8, 1888.0], [49.9, 1888.0], [50.0, 1889.0], [50.1, 1889.0], [50.2, 1889.0], [50.3, 1890.0], [50.4, 1890.0], [50.5, 1891.0], [50.6, 1892.0], [50.7, 1893.0], [50.8, 1894.0], [50.9, 1894.0], [51.0, 1894.0], [51.1, 1895.0], [51.2, 1895.0], [51.3, 1896.0], [51.4, 1896.0], [51.5, 1897.0], [51.6, 1897.0], [51.7, 1898.0], [51.8, 1898.0], [51.9, 1899.0], [52.0, 1899.0], [52.1, 1900.0], [52.2, 1900.0], [52.3, 1901.0], [52.4, 1902.0], [52.5, 1902.0], [52.6, 1903.0], [52.7, 1903.0], [52.8, 1904.0], [52.9, 1905.0], [53.0, 1905.0], [53.1, 1906.0], [53.2, 1906.0], [53.3, 1906.0], [53.4, 1907.0], [53.5, 1907.0], [53.6, 1908.0], [53.7, 1908.0], [53.8, 1909.0], [53.9, 1909.0], [54.0, 1910.0], [54.1, 1910.0], [54.2, 1910.0], [54.3, 1911.0], [54.4, 1912.0], [54.5, 1913.0], [54.6, 1913.0], [54.7, 1914.0], [54.8, 1914.0], [54.9, 1914.0], [55.0, 1915.0], [55.1, 1915.0], [55.2, 1916.0], [55.3, 1916.0], [55.4, 1917.0], [55.5, 1918.0], [55.6, 1919.0], [55.7, 1919.0], [55.8, 1920.0], [55.9, 1920.0], [56.0, 1920.0], [56.1, 1920.0], [56.2, 1921.0], [56.3, 1921.0], [56.4, 1921.0], [56.5, 1922.0], [56.6, 1922.0], [56.7, 1923.0], [56.8, 1923.0], [56.9, 1924.0], [57.0, 1925.0], [57.1, 1925.0], [57.2, 1925.0], [57.3, 1926.0], [57.4, 1926.0], [57.5, 1927.0], [57.6, 1928.0], [57.7, 1929.0], [57.8, 1929.0], [57.9, 1929.0], [58.0, 1930.0], [58.1, 1931.0], [58.2, 1932.0], [58.3, 1932.0], [58.4, 1933.0], [58.5, 1933.0], [58.6, 1934.0], [58.7, 1934.0], [58.8, 1935.0], [58.9, 1935.0], [59.0, 1936.0], [59.1, 1936.0], [59.2, 1936.0], [59.3, 1937.0], [59.4, 1937.0], [59.5, 1937.0], [59.6, 1938.0], [59.7, 1938.0], [59.8, 1939.0], [59.9, 1939.0], [60.0, 1940.0], [60.1, 1940.0], [60.2, 1940.0], [60.3, 1941.0], [60.4, 1942.0], [60.5, 1942.0], [60.6, 1943.0], [60.7, 1943.0], [60.8, 1944.0], [60.9, 1945.0], [61.0, 1945.0], [61.1, 1945.0], [61.2, 1946.0], [61.3, 1946.0], [61.4, 1946.0], [61.5, 1947.0], [61.6, 1947.0], [61.7, 1948.0], [61.8, 1949.0], [61.9, 1949.0], [62.0, 1950.0], [62.1, 1950.0], [62.2, 1951.0], [62.3, 1951.0], [62.4, 1952.0], [62.5, 1953.0], [62.6, 1953.0], [62.7, 1954.0], [62.8, 1954.0], [62.9, 1956.0], [63.0, 1956.0], [63.1, 1957.0], [63.2, 1957.0], [63.3, 1958.0], [63.4, 1958.0], [63.5, 1958.0], [63.6, 1959.0], [63.7, 1959.0], [63.8, 1960.0], [63.9, 1961.0], [64.0, 1961.0], [64.1, 1962.0], [64.2, 1962.0], [64.3, 1963.0], [64.4, 1963.0], [64.5, 1964.0], [64.6, 1964.0], [64.7, 1964.0], [64.8, 1965.0], [64.9, 1965.0], [65.0, 1966.0], [65.1, 1966.0], [65.2, 1967.0], [65.3, 1968.0], [65.4, 1968.0], [65.5, 1969.0], [65.6, 1969.0], [65.7, 1970.0], [65.8, 1970.0], [65.9, 1971.0], [66.0, 1972.0], [66.1, 1973.0], [66.2, 1973.0], [66.3, 1973.0], [66.4, 1974.0], [66.5, 1975.0], [66.6, 1975.0], [66.7, 1976.0], [66.8, 1976.0], [66.9, 1977.0], [67.0, 1978.0], [67.1, 1978.0], [67.2, 1979.0], [67.3, 1979.0], [67.4, 1979.0], [67.5, 1980.0], [67.6, 1981.0], [67.7, 1981.0], [67.8, 1982.0], [67.9, 1983.0], [68.0, 1983.0], [68.1, 1983.0], [68.2, 1984.0], [68.3, 1984.0], [68.4, 1985.0], [68.5, 1986.0], [68.6, 1987.0], [68.7, 1988.0], [68.8, 1988.0], [68.9, 1989.0], [69.0, 1990.0], [69.1, 1991.0], [69.2, 1991.0], [69.3, 1992.0], [69.4, 1992.0], [69.5, 1993.0], [69.6, 1993.0], [69.7, 1994.0], [69.8, 1994.0], [69.9, 1995.0], [70.0, 1995.0], [70.1, 1995.0], [70.2, 1996.0], [70.3, 1997.0], [70.4, 1997.0], [70.5, 1998.0], [70.6, 1998.0], [70.7, 1998.0], [70.8, 1999.0], [70.9, 2000.0], [71.0, 2001.0], [71.1, 2001.0], [71.2, 2001.0], [71.3, 2002.0], [71.4, 2002.0], [71.5, 2003.0], [71.6, 2003.0], [71.7, 2004.0], [71.8, 2005.0], [71.9, 2005.0], [72.0, 2006.0], [72.1, 2006.0], [72.2, 2006.0], [72.3, 2007.0], [72.4, 2008.0], [72.5, 2008.0], [72.6, 2008.0], [72.7, 2009.0], [72.8, 2009.0], [72.9, 2009.0], [73.0, 2010.0], [73.1, 2011.0], [73.2, 2011.0], [73.3, 2011.0], [73.4, 2012.0], [73.5, 2012.0], [73.6, 2012.0], [73.7, 2013.0], [73.8, 2014.0], [73.9, 2014.0], [74.0, 2015.0], [74.1, 2016.0], [74.2, 2016.0], [74.3, 2018.0], [74.4, 2019.0], [74.5, 2020.0], [74.6, 2020.0], [74.7, 2021.0], [74.8, 2021.0], [74.9, 2022.0], [75.0, 2023.0], [75.1, 2024.0], [75.2, 2024.0], [75.3, 2025.0], [75.4, 2025.0], [75.5, 2026.0], [75.6, 2026.0], [75.7, 2026.0], [75.8, 2027.0], [75.9, 2027.0], [76.0, 2027.0], [76.1, 2028.0], [76.2, 2028.0], [76.3, 2029.0], [76.4, 2029.0], [76.5, 2030.0], [76.6, 2030.0], [76.7, 2031.0], [76.8, 2031.0], [76.9, 2032.0], [77.0, 2033.0], [77.1, 2033.0], [77.2, 2034.0], [77.3, 2035.0], [77.4, 2036.0], [77.5, 2036.0], [77.6, 2036.0], [77.7, 2037.0], [77.8, 2037.0], [77.9, 2038.0], [78.0, 2039.0], [78.1, 2039.0], [78.2, 2040.0], [78.3, 2040.0], [78.4, 2041.0], [78.5, 2041.0], [78.6, 2042.0], [78.7, 2043.0], [78.8, 2043.0], [78.9, 2044.0], [79.0, 2044.0], [79.1, 2045.0], [79.2, 2045.0], [79.3, 2046.0], [79.4, 2046.0], [79.5, 2047.0], [79.6, 2047.0], [79.7, 2048.0], [79.8, 2048.0], [79.9, 2049.0], [80.0, 2050.0], [80.1, 2050.0], [80.2, 2051.0], [80.3, 2052.0], [80.4, 2052.0], [80.5, 2052.0], [80.6, 2053.0], [80.7, 2054.0], [80.8, 2055.0], [80.9, 2056.0], [81.0, 2057.0], [81.1, 2057.0], [81.2, 2057.0], [81.3, 2058.0], [81.4, 2058.0], [81.5, 2060.0], [81.6, 2061.0], [81.7, 2061.0], [81.8, 2063.0], [81.9, 2063.0], [82.0, 2064.0], [82.1, 2064.0], [82.2, 2065.0], [82.3, 2066.0], [82.4, 2066.0], [82.5, 2067.0], [82.6, 2067.0], [82.7, 2068.0], [82.8, 2068.0], [82.9, 2069.0], [83.0, 2069.0], [83.1, 2070.0], [83.2, 2071.0], [83.3, 2072.0], [83.4, 2073.0], [83.5, 2074.0], [83.6, 2075.0], [83.7, 2075.0], [83.8, 2076.0], [83.9, 2076.0], [84.0, 2077.0], [84.1, 2078.0], [84.2, 2078.0], [84.3, 2078.0], [84.4, 2079.0], [84.5, 2080.0], [84.6, 2081.0], [84.7, 2082.0], [84.8, 2082.0], [84.9, 2083.0], [85.0, 2084.0], [85.1, 2085.0], [85.2, 2086.0], [85.3, 2087.0], [85.4, 2087.0], [85.5, 2089.0], [85.6, 2089.0], [85.7, 2090.0], [85.8, 2091.0], [85.9, 2091.0], [86.0, 2091.0], [86.1, 2092.0], [86.2, 2092.0], [86.3, 2093.0], [86.4, 2093.0], [86.5, 2094.0], [86.6, 2095.0], [86.7, 2096.0], [86.8, 2096.0], [86.9, 2097.0], [87.0, 2098.0], [87.1, 2099.0], [87.2, 2100.0], [87.3, 2100.0], [87.4, 2101.0], [87.5, 2102.0], [87.6, 2102.0], [87.7, 2103.0], [87.8, 2104.0], [87.9, 2104.0], [88.0, 2105.0], [88.1, 2106.0], [88.2, 2106.0], [88.3, 2107.0], [88.4, 2107.0], [88.5, 2108.0], [88.6, 2108.0], [88.7, 2109.0], [88.8, 2109.0], [88.9, 2110.0], [89.0, 2111.0], [89.1, 2112.0], [89.2, 2113.0], [89.3, 2114.0], [89.4, 2115.0], [89.5, 2116.0], [89.6, 2117.0], [89.7, 2118.0], [89.8, 2119.0], [89.9, 2120.0], [90.0, 2121.0], [90.1, 2122.0], [90.2, 2123.0], [90.3, 2124.0], [90.4, 2124.0], [90.5, 2125.0], [90.6, 2126.0], [90.7, 2128.0], [90.8, 2128.0], [90.9, 2130.0], [91.0, 2130.0], [91.1, 2131.0], [91.2, 2132.0], [91.3, 2133.0], [91.4, 2133.0], [91.5, 2134.0], [91.6, 2136.0], [91.7, 2136.0], [91.8, 2137.0], [91.9, 2139.0], [92.0, 2139.0], [92.1, 2140.0], [92.2, 2141.0], [92.3, 2142.0], [92.4, 2143.0], [92.5, 2144.0], [92.6, 2146.0], [92.7, 2148.0], [92.8, 2149.0], [92.9, 2150.0], [93.0, 2151.0], [93.1, 2152.0], [93.2, 2152.0], [93.3, 2154.0], [93.4, 2155.0], [93.5, 2156.0], [93.6, 2157.0], [93.7, 2159.0], [93.8, 2160.0], [93.9, 2161.0], [94.0, 2163.0], [94.1, 2163.0], [94.2, 2164.0], [94.3, 2164.0], [94.4, 2165.0], [94.5, 2167.0], [94.6, 2167.0], [94.7, 2168.0], [94.8, 2169.0], [94.9, 2172.0], [95.0, 2175.0], [95.1, 2177.0], [95.2, 2179.0], [95.3, 2182.0], [95.4, 2183.0], [95.5, 2184.0], [95.6, 2184.0], [95.7, 2185.0], [95.8, 2187.0], [95.9, 2188.0], [96.0, 2190.0], [96.1, 2192.0], [96.2, 2192.0], [96.3, 2193.0], [96.4, 2196.0], [96.5, 2197.0], [96.6, 2197.0], [96.7, 2199.0], [96.8, 2200.0], [96.9, 2202.0], [97.0, 2204.0], [97.1, 2207.0], [97.2, 2209.0], [97.3, 2210.0], [97.4, 2212.0], [97.5, 2215.0], [97.6, 2216.0], [97.7, 2218.0], [97.8, 2221.0], [97.9, 2224.0], [98.0, 2226.0], [98.1, 2228.0], [98.2, 2230.0], [98.3, 2232.0], [98.4, 2233.0], [98.5, 2236.0], [98.6, 2239.0], [98.7, 2242.0], [98.8, 2246.0], [98.9, 2248.0], [99.0, 2252.0], [99.1, 2257.0], [99.2, 2260.0], [99.3, 2267.0], [99.4, 2273.0], [99.5, 2281.0], [99.6, 2294.0], [99.7, 2305.0], [99.8, 2333.0], [99.9, 2369.0]], "isOverall": false, "label": "테스트 #1 - local, random, max 500", "isController": false}, {"data": [[0.0, 61.0], [0.1, 91.0], [0.2, 125.0], [0.3, 153.0], [0.4, 200.0], [0.5, 209.0], [0.6, 277.0], [0.7, 307.0], [0.8, 331.0], [0.9, 356.0], [1.0, 368.0], [1.1, 373.0], [1.2, 418.0], [1.3, 429.0], [1.4, 452.0], [1.5, 481.0], [1.6, 491.0], [1.7, 502.0], [1.8, 524.0], [1.9, 568.0], [2.0, 579.0], [2.1, 584.0], [2.2, 597.0], [2.3, 632.0], [2.4, 650.0], [2.5, 685.0], [2.6, 702.0], [2.7, 724.0], [2.8, 739.0], [2.9, 744.0], [3.0, 755.0], [3.1, 777.0], [3.2, 787.0], [3.3, 814.0], [3.4, 823.0], [3.5, 828.0], [3.6, 841.0], [3.7, 848.0], [3.8, 868.0], [3.9, 876.0], [4.0, 894.0], [4.1, 911.0], [4.2, 926.0], [4.3, 947.0], [4.4, 956.0], [4.5, 964.0], [4.6, 980.0], [4.7, 998.0], [4.8, 1020.0], [4.9, 1045.0], [5.0, 1056.0], [5.1, 1070.0], [5.2, 1091.0], [5.3, 1122.0], [5.4, 1150.0], [5.5, 1176.0], [5.6, 1197.0], [5.7, 1213.0], [5.8, 1229.0], [5.9, 1239.0], [6.0, 1255.0], [6.1, 1281.0], [6.2, 1297.0], [6.3, 1311.0], [6.4, 1319.0], [6.5, 1327.0], [6.6, 1337.0], [6.7, 1354.0], [6.8, 1370.0], [6.9, 1372.0], [7.0, 1397.0], [7.1, 1408.0], [7.2, 1415.0], [7.3, 1422.0], [7.4, 1428.0], [7.5, 1443.0], [7.6, 1456.0], [7.7, 1465.0], [7.8, 1480.0], [7.9, 1489.0], [8.0, 1500.0], [8.1, 1510.0], [8.2, 1513.0], [8.3, 1522.0], [8.4, 1536.0], [8.5, 1548.0], [8.6, 1556.0], [8.7, 1564.0], [8.8, 1567.0], [8.9, 1574.0], [9.0, 1578.0], [9.1, 1587.0], [9.2, 1590.0], [9.3, 1597.0], [9.4, 1599.0], [9.5, 1604.0], [9.6, 1607.0], [9.7, 1611.0], [9.8, 1613.0], [9.9, 1616.0], [10.0, 1622.0], [10.1, 1627.0], [10.2, 1628.0], [10.3, 1632.0], [10.4, 1635.0], [10.5, 1638.0], [10.6, 1639.0], [10.7, 1641.0], [10.8, 1644.0], [10.9, 1646.0], [11.0, 1647.0], [11.1, 1652.0], [11.2, 1656.0], [11.3, 1657.0], [11.4, 1659.0], [11.5, 1661.0], [11.6, 1664.0], [11.7, 1665.0], [11.8, 1667.0], [11.9, 1669.0], [12.0, 1671.0], [12.1, 1672.0], [12.2, 1673.0], [12.3, 1677.0], [12.4, 1679.0], [12.5, 1681.0], [12.6, 1683.0], [12.7, 1685.0], [12.8, 1685.0], [12.9, 1686.0], [13.0, 1688.0], [13.1, 1690.0], [13.2, 1691.0], [13.3, 1695.0], [13.4, 1697.0], [13.5, 1699.0], [13.6, 1701.0], [13.7, 1702.0], [13.8, 1702.0], [13.9, 1705.0], [14.0, 1706.0], [14.1, 1708.0], [14.2, 1709.0], [14.3, 1711.0], [14.4, 1713.0], [14.5, 1716.0], [14.6, 1716.0], [14.7, 1717.0], [14.8, 1721.0], [14.9, 1723.0], [15.0, 1724.0], [15.1, 1726.0], [15.2, 1727.0], [15.3, 1730.0], [15.4, 1731.0], [15.5, 1732.0], [15.6, 1733.0], [15.7, 1734.0], [15.8, 1735.0], [15.9, 1736.0], [16.0, 1737.0], [16.1, 1738.0], [16.2, 1739.0], [16.3, 1740.0], [16.4, 1742.0], [16.5, 1743.0], [16.6, 1745.0], [16.7, 1746.0], [16.8, 1747.0], [16.9, 1749.0], [17.0, 1751.0], [17.1, 1752.0], [17.2, 1753.0], [17.3, 1755.0], [17.4, 1756.0], [17.5, 1759.0], [17.6, 1761.0], [17.7, 1763.0], [17.8, 1764.0], [17.9, 1765.0], [18.0, 1766.0], [18.1, 1767.0], [18.2, 1768.0], [18.3, 1769.0], [18.4, 1771.0], [18.5, 1773.0], [18.6, 1774.0], [18.7, 1775.0], [18.8, 1776.0], [18.9, 1777.0], [19.0, 1779.0], [19.1, 1780.0], [19.2, 1781.0], [19.3, 1782.0], [19.4, 1783.0], [19.5, 1784.0], [19.6, 1785.0], [19.7, 1786.0], [19.8, 1786.0], [19.9, 1788.0], [20.0, 1789.0], [20.1, 1790.0], [20.2, 1790.0], [20.3, 1791.0], [20.4, 1792.0], [20.5, 1793.0], [20.6, 1793.0], [20.7, 1796.0], [20.8, 1797.0], [20.9, 1798.0], [21.0, 1800.0], [21.1, 1800.0], [21.2, 1801.0], [21.3, 1802.0], [21.4, 1803.0], [21.5, 1805.0], [21.6, 1805.0], [21.7, 1805.0], [21.8, 1807.0], [21.9, 1808.0], [22.0, 1809.0], [22.1, 1810.0], [22.2, 1811.0], [22.3, 1812.0], [22.4, 1813.0], [22.5, 1815.0], [22.6, 1816.0], [22.7, 1818.0], [22.8, 1819.0], [22.9, 1820.0], [23.0, 1821.0], [23.1, 1822.0], [23.2, 1823.0], [23.3, 1824.0], [23.4, 1825.0], [23.5, 1827.0], [23.6, 1828.0], [23.7, 1828.0], [23.8, 1829.0], [23.9, 1830.0], [24.0, 1831.0], [24.1, 1831.0], [24.2, 1833.0], [24.3, 1833.0], [24.4, 1834.0], [24.5, 1835.0], [24.6, 1836.0], [24.7, 1837.0], [24.8, 1839.0], [24.9, 1839.0], [25.0, 1841.0], [25.1, 1842.0], [25.2, 1843.0], [25.3, 1844.0], [25.4, 1845.0], [25.5, 1846.0], [25.6, 1847.0], [25.7, 1847.0], [25.8, 1849.0], [25.9, 1849.0], [26.0, 1850.0], [26.1, 1851.0], [26.2, 1852.0], [26.3, 1853.0], [26.4, 1854.0], [26.5, 1854.0], [26.6, 1855.0], [26.7, 1857.0], [26.8, 1858.0], [26.9, 1859.0], [27.0, 1860.0], [27.1, 1861.0], [27.2, 1862.0], [27.3, 1863.0], [27.4, 1864.0], [27.5, 1867.0], [27.6, 1868.0], [27.7, 1869.0], [27.8, 1870.0], [27.9, 1871.0], [28.0, 1871.0], [28.1, 1873.0], [28.2, 1874.0], [28.3, 1875.0], [28.4, 1876.0], [28.5, 1877.0], [28.6, 1878.0], [28.7, 1879.0], [28.8, 1879.0], [28.9, 1880.0], [29.0, 1881.0], [29.1, 1883.0], [29.2, 1883.0], [29.3, 1884.0], [29.4, 1886.0], [29.5, 1887.0], [29.6, 1888.0], [29.7, 1889.0], [29.8, 1890.0], [29.9, 1891.0], [30.0, 1892.0], [30.1, 1893.0], [30.2, 1894.0], [30.3, 1895.0], [30.4, 1896.0], [30.5, 1897.0], [30.6, 1898.0], [30.7, 1898.0], [30.8, 1899.0], [30.9, 1900.0], [31.0, 1901.0], [31.1, 1902.0], [31.2, 1902.0], [31.3, 1904.0], [31.4, 1906.0], [31.5, 1906.0], [31.6, 1907.0], [31.7, 1909.0], [31.8, 1910.0], [31.9, 1911.0], [32.0, 1913.0], [32.1, 1915.0], [32.2, 1916.0], [32.3, 1916.0], [32.4, 1917.0], [32.5, 1918.0], [32.6, 1919.0], [32.7, 1919.0], [32.8, 1920.0], [32.9, 1920.0], [33.0, 1921.0], [33.1, 1924.0], [33.2, 1925.0], [33.3, 1926.0], [33.4, 1927.0], [33.5, 1927.0], [33.6, 1928.0], [33.7, 1929.0], [33.8, 1930.0], [33.9, 1932.0], [34.0, 1932.0], [34.1, 1934.0], [34.2, 1934.0], [34.3, 1935.0], [34.4, 1935.0], [34.5, 1936.0], [34.6, 1937.0], [34.7, 1939.0], [34.8, 1939.0], [34.9, 1940.0], [35.0, 1941.0], [35.1, 1941.0], [35.2, 1942.0], [35.3, 1943.0], [35.4, 1943.0], [35.5, 1945.0], [35.6, 1945.0], [35.7, 1947.0], [35.8, 1948.0], [35.9, 1949.0], [36.0, 1950.0], [36.1, 1951.0], [36.2, 1952.0], [36.3, 1953.0], [36.4, 1954.0], [36.5, 1955.0], [36.6, 1955.0], [36.7, 1956.0], [36.8, 1957.0], [36.9, 1957.0], [37.0, 1958.0], [37.1, 1959.0], [37.2, 1961.0], [37.3, 1961.0], [37.4, 1963.0], [37.5, 1964.0], [37.6, 1965.0], [37.7, 1966.0], [37.8, 1969.0], [37.9, 1970.0], [38.0, 1971.0], [38.1, 1972.0], [38.2, 1973.0], [38.3, 1975.0], [38.4, 1977.0], [38.5, 1979.0], [38.6, 1980.0], [38.7, 1981.0], [38.8, 1983.0], [38.9, 1985.0], [39.0, 1987.0], [39.1, 1987.0], [39.2, 1987.0], [39.3, 1988.0], [39.4, 1989.0], [39.5, 1991.0], [39.6, 1992.0], [39.7, 1993.0], [39.8, 1994.0], [39.9, 1995.0], [40.0, 1995.0], [40.1, 1996.0], [40.2, 1997.0], [40.3, 1999.0], [40.4, 1999.0], [40.5, 1999.0], [40.6, 2000.0], [40.7, 2000.0], [40.8, 2001.0], [40.9, 2001.0], [41.0, 2002.0], [41.1, 2004.0], [41.2, 2005.0], [41.3, 2006.0], [41.4, 2007.0], [41.5, 2010.0], [41.6, 2011.0], [41.7, 2012.0], [41.8, 2013.0], [41.9, 2015.0], [42.0, 2016.0], [42.1, 2017.0], [42.2, 2018.0], [42.3, 2019.0], [42.4, 2022.0], [42.5, 2022.0], [42.6, 2023.0], [42.7, 2023.0], [42.8, 2024.0], [42.9, 2026.0], [43.0, 2026.0], [43.1, 2027.0], [43.2, 2028.0], [43.3, 2032.0], [43.4, 2033.0], [43.5, 2034.0], [43.6, 2037.0], [43.7, 2038.0], [43.8, 2039.0], [43.9, 2041.0], [44.0, 2042.0], [44.1, 2043.0], [44.2, 2043.0], [44.3, 2043.0], [44.4, 2044.0], [44.5, 2045.0], [44.6, 2046.0], [44.7, 2046.0], [44.8, 2047.0], [44.9, 2048.0], [45.0, 2049.0], [45.1, 2049.0], [45.2, 2051.0], [45.3, 2053.0], [45.4, 2054.0], [45.5, 2055.0], [45.6, 2055.0], [45.7, 2056.0], [45.8, 2058.0], [45.9, 2060.0], [46.0, 2060.0], [46.1, 2061.0], [46.2, 2062.0], [46.3, 2063.0], [46.4, 2064.0], [46.5, 2065.0], [46.6, 2066.0], [46.7, 2068.0], [46.8, 2069.0], [46.9, 2070.0], [47.0, 2072.0], [47.1, 2072.0], [47.2, 2073.0], [47.3, 2075.0], [47.4, 2075.0], [47.5, 2077.0], [47.6, 2078.0], [47.7, 2079.0], [47.8, 2079.0], [47.9, 2081.0], [48.0, 2083.0], [48.1, 2084.0], [48.2, 2085.0], [48.3, 2086.0], [48.4, 2087.0], [48.5, 2088.0], [48.6, 2089.0], [48.7, 2090.0], [48.8, 2091.0], [48.9, 2092.0], [49.0, 2093.0], [49.1, 2094.0], [49.2, 2096.0], [49.3, 2097.0], [49.4, 2098.0], [49.5, 2100.0], [49.6, 2102.0], [49.7, 2103.0], [49.8, 2104.0], [49.9, 2105.0], [50.0, 2106.0], [50.1, 2108.0], [50.2, 2109.0], [50.3, 2109.0], [50.4, 2110.0], [50.5, 2112.0], [50.6, 2114.0], [50.7, 2115.0], [50.8, 2115.0], [50.9, 2116.0], [51.0, 2117.0], [51.1, 2118.0], [51.2, 2119.0], [51.3, 2120.0], [51.4, 2121.0], [51.5, 2121.0], [51.6, 2122.0], [51.7, 2124.0], [51.8, 2125.0], [51.9, 2126.0], [52.0, 2126.0], [52.1, 2128.0], [52.2, 2129.0], [52.3, 2130.0], [52.4, 2130.0], [52.5, 2132.0], [52.6, 2133.0], [52.7, 2134.0], [52.8, 2135.0], [52.9, 2135.0], [53.0, 2136.0], [53.1, 2137.0], [53.2, 2138.0], [53.3, 2139.0], [53.4, 2140.0], [53.5, 2141.0], [53.6, 2143.0], [53.7, 2144.0], [53.8, 2146.0], [53.9, 2147.0], [54.0, 2147.0], [54.1, 2148.0], [54.2, 2149.0], [54.3, 2150.0], [54.4, 2150.0], [54.5, 2151.0], [54.6, 2152.0], [54.7, 2153.0], [54.8, 2155.0], [54.9, 2156.0], [55.0, 2156.0], [55.1, 2157.0], [55.2, 2159.0], [55.3, 2160.0], [55.4, 2161.0], [55.5, 2163.0], [55.6, 2163.0], [55.7, 2165.0], [55.8, 2166.0], [55.9, 2168.0], [56.0, 2170.0], [56.1, 2171.0], [56.2, 2173.0], [56.3, 2175.0], [56.4, 2176.0], [56.5, 2176.0], [56.6, 2178.0], [56.7, 2178.0], [56.8, 2179.0], [56.9, 2180.0], [57.0, 2181.0], [57.1, 2182.0], [57.2, 2183.0], [57.3, 2184.0], [57.4, 2185.0], [57.5, 2185.0], [57.6, 2186.0], [57.7, 2187.0], [57.8, 2188.0], [57.9, 2189.0], [58.0, 2189.0], [58.1, 2191.0], [58.2, 2192.0], [58.3, 2193.0], [58.4, 2193.0], [58.5, 2195.0], [58.6, 2196.0], [58.7, 2197.0], [58.8, 2199.0], [58.9, 2200.0], [59.0, 2201.0], [59.1, 2202.0], [59.2, 2203.0], [59.3, 2204.0], [59.4, 2205.0], [59.5, 2206.0], [59.6, 2207.0], [59.7, 2207.0], [59.8, 2208.0], [59.9, 2209.0], [60.0, 2209.0], [60.1, 2210.0], [60.2, 2211.0], [60.3, 2213.0], [60.4, 2213.0], [60.5, 2214.0], [60.6, 2215.0], [60.7, 2216.0], [60.8, 2217.0], [60.9, 2218.0], [61.0, 2219.0], [61.1, 2220.0], [61.2, 2222.0], [61.3, 2223.0], [61.4, 2224.0], [61.5, 2225.0], [61.6, 2226.0], [61.7, 2227.0], [61.8, 2228.0], [61.9, 2230.0], [62.0, 2231.0], [62.1, 2231.0], [62.2, 2232.0], [62.3, 2235.0], [62.4, 2235.0], [62.5, 2236.0], [62.6, 2238.0], [62.7, 2239.0], [62.8, 2240.0], [62.9, 2240.0], [63.0, 2241.0], [63.1, 2242.0], [63.2, 2245.0], [63.3, 2246.0], [63.4, 2247.0], [63.5, 2248.0], [63.6, 2249.0], [63.7, 2251.0], [63.8, 2252.0], [63.9, 2252.0], [64.0, 2253.0], [64.1, 2254.0], [64.2, 2255.0], [64.3, 2256.0], [64.4, 2257.0], [64.5, 2258.0], [64.6, 2259.0], [64.7, 2260.0], [64.8, 2261.0], [64.9, 2262.0], [65.0, 2264.0], [65.1, 2264.0], [65.2, 2266.0], [65.3, 2268.0], [65.4, 2269.0], [65.5, 2271.0], [65.6, 2272.0], [65.7, 2274.0], [65.8, 2275.0], [65.9, 2275.0], [66.0, 2276.0], [66.1, 2278.0], [66.2, 2279.0], [66.3, 2280.0], [66.4, 2283.0], [66.5, 2284.0], [66.6, 2285.0], [66.7, 2286.0], [66.8, 2287.0], [66.9, 2288.0], [67.0, 2290.0], [67.1, 2291.0], [67.2, 2292.0], [67.3, 2294.0], [67.4, 2294.0], [67.5, 2295.0], [67.6, 2297.0], [67.7, 2298.0], [67.8, 2299.0], [67.9, 2300.0], [68.0, 2301.0], [68.1, 2302.0], [68.2, 2303.0], [68.3, 2304.0], [68.4, 2305.0], [68.5, 2306.0], [68.6, 2307.0], [68.7, 2309.0], [68.8, 2310.0], [68.9, 2312.0], [69.0, 2313.0], [69.1, 2314.0], [69.2, 2315.0], [69.3, 2315.0], [69.4, 2315.0], [69.5, 2316.0], [69.6, 2318.0], [69.7, 2319.0], [69.8, 2320.0], [69.9, 2322.0], [70.0, 2323.0], [70.1, 2324.0], [70.2, 2324.0], [70.3, 2325.0], [70.4, 2326.0], [70.5, 2327.0], [70.6, 2329.0], [70.7, 2330.0], [70.8, 2330.0], [70.9, 2331.0], [71.0, 2332.0], [71.1, 2333.0], [71.2, 2334.0], [71.3, 2336.0], [71.4, 2337.0], [71.5, 2338.0], [71.6, 2338.0], [71.7, 2339.0], [71.8, 2340.0], [71.9, 2341.0], [72.0, 2342.0], [72.1, 2344.0], [72.2, 2346.0], [72.3, 2348.0], [72.4, 2350.0], [72.5, 2351.0], [72.6, 2353.0], [72.7, 2356.0], [72.8, 2357.0], [72.9, 2357.0], [73.0, 2358.0], [73.1, 2359.0], [73.2, 2359.0], [73.3, 2360.0], [73.4, 2361.0], [73.5, 2363.0], [73.6, 2363.0], [73.7, 2364.0], [73.8, 2365.0], [73.9, 2366.0], [74.0, 2367.0], [74.1, 2368.0], [74.2, 2369.0], [74.3, 2370.0], [74.4, 2372.0], [74.5, 2373.0], [74.6, 2374.0], [74.7, 2375.0], [74.8, 2375.0], [74.9, 2376.0], [75.0, 2377.0], [75.1, 2379.0], [75.2, 2380.0], [75.3, 2381.0], [75.4, 2384.0], [75.5, 2384.0], [75.6, 2386.0], [75.7, 2387.0], [75.8, 2388.0], [75.9, 2389.0], [76.0, 2390.0], [76.1, 2391.0], [76.2, 2392.0], [76.3, 2394.0], [76.4, 2395.0], [76.5, 2397.0], [76.6, 2397.0], [76.7, 2398.0], [76.8, 2399.0], [76.9, 2400.0], [77.0, 2401.0], [77.1, 2403.0], [77.2, 2404.0], [77.3, 2405.0], [77.4, 2407.0], [77.5, 2407.0], [77.6, 2408.0], [77.7, 2409.0], [77.8, 2410.0], [77.9, 2410.0], [78.0, 2411.0], [78.1, 2412.0], [78.2, 2413.0], [78.3, 2414.0], [78.4, 2415.0], [78.5, 2416.0], [78.6, 2417.0], [78.7, 2418.0], [78.8, 2419.0], [78.9, 2420.0], [79.0, 2422.0], [79.1, 2422.0], [79.2, 2424.0], [79.3, 2425.0], [79.4, 2425.0], [79.5, 2427.0], [79.6, 2428.0], [79.7, 2429.0], [79.8, 2429.0], [79.9, 2431.0], [80.0, 2432.0], [80.1, 2433.0], [80.2, 2434.0], [80.3, 2435.0], [80.4, 2436.0], [80.5, 2437.0], [80.6, 2439.0], [80.7, 2440.0], [80.8, 2441.0], [80.9, 2442.0], [81.0, 2443.0], [81.1, 2445.0], [81.2, 2446.0], [81.3, 2447.0], [81.4, 2448.0], [81.5, 2450.0], [81.6, 2451.0], [81.7, 2451.0], [81.8, 2452.0], [81.9, 2454.0], [82.0, 2456.0], [82.1, 2457.0], [82.2, 2459.0], [82.3, 2460.0], [82.4, 2461.0], [82.5, 2463.0], [82.6, 2464.0], [82.7, 2465.0], [82.8, 2466.0], [82.9, 2467.0], [83.0, 2468.0], [83.1, 2468.0], [83.2, 2469.0], [83.3, 2470.0], [83.4, 2471.0], [83.5, 2472.0], [83.6, 2473.0], [83.7, 2475.0], [83.8, 2478.0], [83.9, 2478.0], [84.0, 2479.0], [84.1, 2480.0], [84.2, 2481.0], [84.3, 2482.0], [84.4, 2482.0], [84.5, 2483.0], [84.6, 2484.0], [84.7, 2485.0], [84.8, 2487.0], [84.9, 2487.0], [85.0, 2488.0], [85.1, 2489.0], [85.2, 2491.0], [85.3, 2491.0], [85.4, 2492.0], [85.5, 2493.0], [85.6, 2494.0], [85.7, 2495.0], [85.8, 2495.0], [85.9, 2497.0], [86.0, 2498.0], [86.1, 2499.0], [86.2, 2500.0], [86.3, 2502.0], [86.4, 2503.0], [86.5, 2504.0], [86.6, 2506.0], [86.7, 2508.0], [86.8, 2509.0], [86.9, 2510.0], [87.0, 2511.0], [87.1, 2512.0], [87.2, 2513.0], [87.3, 2515.0], [87.4, 2516.0], [87.5, 2516.0], [87.6, 2517.0], [87.7, 2519.0], [87.8, 2519.0], [87.9, 2520.0], [88.0, 2521.0], [88.1, 2521.0], [88.2, 2522.0], [88.3, 2522.0], [88.4, 2525.0], [88.5, 2527.0], [88.6, 2529.0], [88.7, 2530.0], [88.8, 2532.0], [88.9, 2533.0], [89.0, 2534.0], [89.1, 2535.0], [89.2, 2537.0], [89.3, 2538.0], [89.4, 2540.0], [89.5, 2540.0], [89.6, 2541.0], [89.7, 2543.0], [89.8, 2545.0], [89.9, 2546.0], [90.0, 2548.0], [90.1, 2549.0], [90.2, 2551.0], [90.3, 2553.0], [90.4, 2554.0], [90.5, 2557.0], [90.6, 2557.0], [90.7, 2560.0], [90.8, 2562.0], [90.9, 2563.0], [91.0, 2565.0], [91.1, 2567.0], [91.2, 2568.0], [91.3, 2570.0], [91.4, 2572.0], [91.5, 2572.0], [91.6, 2573.0], [91.7, 2574.0], [91.8, 2576.0], [91.9, 2578.0], [92.0, 2578.0], [92.1, 2580.0], [92.2, 2581.0], [92.3, 2582.0], [92.4, 2584.0], [92.5, 2585.0], [92.6, 2586.0], [92.7, 2588.0], [92.8, 2589.0], [92.9, 2590.0], [93.0, 2594.0], [93.1, 2596.0], [93.2, 2597.0], [93.3, 2598.0], [93.4, 2600.0], [93.5, 2601.0], [93.6, 2602.0], [93.7, 2603.0], [93.8, 2605.0], [93.9, 2607.0], [94.0, 2608.0], [94.1, 2609.0], [94.2, 2611.0], [94.3, 2612.0], [94.4, 2613.0], [94.5, 2614.0], [94.6, 2616.0], [94.7, 2617.0], [94.8, 2621.0], [94.9, 2622.0], [95.0, 2625.0], [95.1, 2628.0], [95.2, 2629.0], [95.3, 2631.0], [95.4, 2634.0], [95.5, 2637.0], [95.6, 2639.0], [95.7, 2640.0], [95.8, 2642.0], [95.9, 2645.0], [96.0, 2646.0], [96.1, 2647.0], [96.2, 2649.0], [96.3, 2652.0], [96.4, 2655.0], [96.5, 2657.0], [96.6, 2658.0], [96.7, 2663.0], [96.8, 2667.0], [96.9, 2669.0], [97.0, 2670.0], [97.1, 2672.0], [97.2, 2672.0], [97.3, 2674.0], [97.4, 2676.0], [97.5, 2678.0], [97.6, 2681.0], [97.7, 2684.0], [97.8, 2688.0], [97.9, 2690.0], [98.0, 2692.0], [98.1, 2696.0], [98.2, 2700.0], [98.3, 2704.0], [98.4, 2710.0], [98.5, 2715.0], [98.6, 2716.0], [98.7, 2720.0], [98.8, 2724.0], [98.9, 2730.0], [99.0, 2734.0], [99.1, 2742.0], [99.2, 2753.0], [99.3, 2761.0], [99.4, 2766.0], [99.5, 2778.0], [99.6, 2790.0], [99.7, 2799.0], [99.8, 2813.0], [99.9, 2832.0]], "isOverall": false, "label": "테스트 #2 - local, random, max 1000", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 939.0, "series": [{"data": [[0.0, 15.0], [600.0, 32.0], [700.0, 24.0], [800.0, 25.0], [900.0, 28.0], [1000.0, 29.0], [1100.0, 28.0], [1200.0, 39.0], [1300.0, 37.0], [1400.0, 64.0], [1500.0, 104.0], [100.0, 44.0], [1600.0, 318.0], [1700.0, 692.0], [1800.0, 897.0], [1900.0, 939.0], [2000.0, 812.0], [2100.0, 483.0], [2200.0, 144.0], [2300.0, 15.0], [2400.0, 2.0], [200.0, 53.0], [300.0, 61.0], [400.0, 69.0], [500.0, 46.0]], "isOverall": false, "label": "테스트 #1 - local, random, max 500", "isController": false}, {"data": [[0.0, 7.0], [600.0, 19.0], [700.0, 33.0], [800.0, 39.0], [900.0, 35.0], [1000.0, 26.0], [1100.0, 19.0], [1200.0, 31.0], [1300.0, 40.0], [1400.0, 48.0], [1500.0, 72.0], [100.0, 12.0], [1600.0, 206.0], [1700.0, 372.0], [1800.0, 494.0], [1900.0, 483.0], [2000.0, 448.0], [2100.0, 467.0], [2200.0, 451.0], [2300.0, 450.0], [2400.0, 463.0], [2500.0, 364.0], [2600.0, 238.0], [2700.0, 77.0], [2800.0, 13.0], [2900.0, 2.0], [200.0, 14.0], [300.0, 24.0], [400.0, 23.0], [500.0, 30.0]], "isOverall": false, "label": "테스트 #2 - local, random, max 1000", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 326.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 9005.0, "series": [{"data": [[0.0, 326.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 669.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9005.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 468.2892685354122, "minX": 1.69491342E12, "maxY": 488.0926718710658, "series": [{"data": [[1.69491348E12, 468.2892685354122], [1.69491342E12, 488.0926718710658]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69491348E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 68.5, "minX": 39.0, "maxY": 2696.0, "series": [{"data": [[89.0, 115.0], [90.0, 120.0], [88.0, 966.5], [92.0, 126.0], [94.0, 69.0], [93.0, 275.0], [98.0, 1521.0], [100.0, 74.5], [102.0, 131.0], [103.0, 136.5], [105.0, 141.0], [107.0, 435.75], [119.0, 146.33333333333334], [116.0, 1233.0], [120.0, 409.0], [123.0, 68.5], [126.0, 192.0], [130.0, 69.0], [131.0, 130.0], [135.0, 1156.0], [132.0, 1168.0], [129.0, 1020.0], [136.0, 644.6666666666667], [140.0, 198.0], [143.0, 1162.0], [141.0, 1316.0], [148.0, 200.0], [149.0, 236.0], [154.0, 928.0], [158.0, 167.33333333333334], [152.0, 1130.5], [163.0, 260.0], [167.0, 206.0], [166.0, 1293.0], [160.0, 1659.0], [172.0, 230.66666666666666], [176.0, 249.0], [179.0, 236.5], [182.0, 152.0], [180.0, 1308.0], [188.0, 206.0], [190.0, 1385.0], [192.0, 249.0], [196.0, 307.0], [199.0, 331.0], [195.0, 1316.0], [193.0, 1354.0], [205.0, 280.5], [206.0, 1664.0], [202.0, 1363.0], [209.0, 316.0], [211.0, 240.0], [215.0, 181.0], [208.0, 1487.0], [219.0, 375.0], [221.0, 297.8333333333333], [222.0, 317.0], [218.0, 1311.3333333333333], [226.0, 274.0], [227.0, 1668.0], [237.0, 326.0], [239.0, 1284.0], [235.0, 1777.0], [240.0, 866.0], [245.0, 225.0], [244.0, 1425.0], [252.0, 355.0], [251.0, 1714.0], [249.0, 1348.0], [269.0, 877.3333333333333], [260.0, 297.0], [263.0, 266.0], [268.0, 993.0], [256.0, 1656.0], [271.0, 1548.25], [270.0, 1538.0], [267.0, 1737.6666666666667], [265.0, 1727.0], [262.0, 1594.0], [274.0, 422.5], [272.0, 1012.5], [275.0, 912.0], [277.0, 491.0], [279.0, 1552.0], [280.0, 423.0], [286.0, 443.1666666666667], [285.0, 1534.0], [283.0, 1395.0], [282.0, 1568.5], [300.0, 320.5], [288.0, 441.0], [290.0, 1484.0], [291.0, 1392.0], [294.0, 429.0], [293.0, 1796.0], [297.0, 342.0], [303.0, 941.5], [298.0, 1411.0], [296.0, 1655.5], [295.0, 1699.0], [316.0, 456.3333333333333], [304.0, 542.0], [311.0, 1808.0], [308.0, 1169.0], [309.0, 556.0], [312.0, 1187.5], [313.0, 902.9999999999999], [318.0, 1471.5], [317.0, 1842.0], [315.0, 1611.0], [314.0, 1179.0], [333.0, 1188.0], [320.0, 351.0], [326.0, 1688.0], [332.0, 1840.0], [323.0, 1762.3333333333333], [321.0, 1601.6666666666667], [324.0, 464.0], [325.0, 412.0], [328.0, 409.5], [329.0, 403.3333333333333], [330.0, 1140.0], [331.0, 1594.5], [335.0, 1692.3333333333333], [334.0, 1423.0], [337.0, 1392.1666666666667], [336.0, 506.0], [338.0, 480.0], [348.0, 1632.0], [339.0, 1606.0], [341.0, 403.0], [340.0, 1566.0], [342.0, 1323.6], [343.0, 363.0], [345.0, 1180.2], [346.0, 1552.0], [349.0, 423.0], [351.0, 1656.75], [344.0, 1807.0], [353.0, 902.0], [355.0, 1104.5], [354.0, 1680.0], [357.0, 447.0], [360.0, 915.3333333333333], [365.0, 844.0], [363.0, 1728.8], [362.0, 1671.0], [359.0, 1815.0], [352.0, 1611.6666666666667], [356.0, 1753.0], [368.0, 1372.8], [369.0, 440.5], [374.0, 1492.3333333333333], [378.0, 920.6666666666667], [382.0, 400.0], [380.0, 1811.0], [376.0, 1704.5], [373.0, 1826.5], [371.0, 1528.0], [398.0, 1279.6666666666667], [391.0, 1213.6666666666667], [394.0, 537.5], [395.0, 1061.5], [399.0, 1512.0], [393.0, 1667.0], [388.0, 1659.0], [387.0, 1659.3333333333333], [386.0, 1854.0], [385.0, 1676.0], [415.0, 1609.0], [401.0, 1365.3333333333333], [411.0, 450.3333333333333], [412.0, 1786.5], [403.0, 1676.5], [402.0, 1721.0], [410.0, 1488.0], [409.0, 1770.5], [408.0, 1894.6666666666667], [407.0, 1907.5], [400.0, 1694.3333333333333], [406.0, 1496.0], [405.0, 1682.3333333333333], [404.0, 1796.7142857142858], [422.0, 475.0], [419.0, 1445.6666666666667], [421.0, 505.6666666666667], [427.0, 532.5], [431.0, 1777.3750000000002], [429.0, 1914.0], [425.0, 1535.0], [420.0, 1798.375], [416.0, 1719.5714285714287], [445.0, 1125.0], [438.0, 1339.6666666666667], [436.0, 1595.8333333333335], [437.0, 1796.5], [440.0, 1701.0], [447.0, 500.0], [446.0, 1840.0], [444.0, 1778.25], [439.0, 1879.25], [432.0, 1671.5], [434.0, 1941.5], [443.0, 1791.7777777777778], [441.0, 1670.0], [462.0, 1975.4285714285713], [449.0, 573.0], [450.0, 1665.75], [451.0, 1955.3333333333333], [453.0, 1498.857142857143], [452.0, 1781.0], [454.0, 1081.0], [455.0, 1761.0], [463.0, 1946.0], [457.0, 2140.0], [456.0, 2011.6666666666667], [461.0, 1865.2857142857144], [460.0, 2011.5], [459.0, 2152.0], [458.0, 1925.0], [478.0, 1922.5], [472.0, 630.0], [465.0, 1738.8750000000002], [464.0, 1870.0], [466.0, 2199.0], [471.0, 1844.1666666666665], [470.0, 1839.0], [468.0, 1994.0], [473.0, 1867.0], [474.0, 1368.0], [479.0, 2044.6], [477.0, 1839.142857142857], [476.0, 1998.5882352941176], [475.0, 2009.4], [494.0, 1662.1250000000002], [482.0, 1647.3333333333335], [485.0, 1646.75], [487.0, 1922.3333333333335], [480.0, 2027.0], [486.0, 1856.0], [492.0, 615.0], [483.0, 1973.888888888889], [495.0, 1899.0], [493.0, 1883.5357142857147], [491.0, 1929.0], [490.0, 1777.142857142857], [489.0, 2066.5], [488.0, 1924.4], [500.0, 1840.2435387674004], [499.0, 1897.7831325301206], [498.0, 2020.1666666666665], [497.0, 1920.271317829457], [496.0, 1914.1]], "isOverall": false, "label": "테스트 #1 - local, random, max 500", "isController": false}, {"data": [[480.89019999999925, 1777.8733999999988]], "isOverall": false, "label": "테스트 #1 - local, random, max 500-Aggregated", "isController": false}, {"data": [[39.0, 872.0], [43.0, 826.0], [42.0, 913.0], [45.0, 1357.0], [44.0, 1070.0], [47.0, 856.0], [46.0, 1014.0], [48.0, 1483.5], [51.0, 1281.0], [50.0, 1212.6666666666667], [53.0, 1225.0], [52.0, 1479.0], [55.0, 1169.0], [57.0, 1118.0], [56.0, 1329.0], [59.0, 1684.0], [58.0, 1462.0], [60.0, 1470.7499999999998], [63.0, 1756.5], [62.0, 1210.5], [67.0, 1439.5], [66.0, 1913.0], [65.0, 1712.0], [64.0, 1573.0], [69.0, 1101.0], [68.0, 1499.0], [75.0, 2073.0], [74.0, 1335.2], [73.0, 1513.0], [72.0, 1278.3333333333333], [79.0, 488.0], [78.0, 650.0], [77.0, 1177.5], [83.0, 1015.0], [82.0, 1898.0], [81.0, 1825.0], [80.0, 2015.0], [87.0, 1335.0], [86.0, 382.0], [85.0, 1603.5], [91.0, 1255.0], [90.0, 1087.0], [89.0, 2097.0], [88.0, 1210.6666666666667], [95.0, 1213.0], [94.0, 1157.0], [93.0, 1625.5], [92.0, 2018.0], [98.0, 851.0], [97.0, 1247.0], [103.0, 1833.0], [102.0, 1300.0], [101.0, 1442.6666666666667], [100.0, 1808.0], [107.0, 1370.0], [106.0, 2247.0], [105.0, 2225.0], [104.0, 1846.0], [111.0, 1813.0], [110.0, 1130.0], [108.0, 654.0], [115.0, 1692.0], [114.0, 1328.0], [113.0, 1917.0], [112.0, 1045.0], [119.0, 2109.0], [118.0, 1416.0], [117.0, 841.0], [116.0, 1450.0], [123.0, 819.0], [122.0, 1056.0], [121.0, 1548.0], [120.0, 1461.0], [127.0, 1321.0], [126.0, 1408.0], [131.0, 830.0], [135.0, 964.0], [134.0, 1650.5], [132.0, 1786.0], [130.0, 983.0], [129.0, 1629.5], [143.0, 2005.5], [142.0, 1114.0], [141.0, 1293.0], [139.0, 1521.0], [137.0, 2120.0], [136.0, 2002.0], [151.0, 1371.0], [150.0, 1850.0], [149.0, 1616.0], [148.0, 998.0], [147.0, 1207.0], [146.0, 1733.0], [144.0, 2117.0], [157.0, 777.0], [159.0, 1197.0], [158.0, 1337.0], [156.0, 2226.0], [155.0, 1589.0], [154.0, 1250.0], [153.0, 1299.0], [152.0, 1511.0], [167.0, 1883.0], [166.0, 1314.0], [165.0, 1741.0], [163.0, 1817.0], [162.0, 2085.0], [161.0, 2252.0], [160.0, 1711.0], [174.0, 1792.0], [173.0, 1327.0], [172.0, 1372.0], [171.0, 1150.0], [170.0, 1202.0], [169.0, 2137.5], [183.0, 2319.0], [182.0, 1549.0], [180.0, 783.0], [179.0, 1500.0], [178.0, 1849.0], [177.0, 1587.0], [176.0, 1514.5], [191.0, 1410.0], [190.0, 1736.0], [189.0, 1302.0], [188.0, 2088.0], [187.0, 1631.0], [186.0, 1908.0], [184.0, 1513.0], [198.0, 1767.3333333333333], [195.0, 1952.0], [194.0, 2228.0], [193.0, 1491.0], [192.0, 1717.0], [205.0, 1102.6666666666667], [207.0, 1928.0], [206.0, 2043.0], [203.0, 1791.0], [202.0, 1859.0], [201.0, 1577.0], [200.0, 1889.0], [215.0, 1748.5], [214.0, 1739.0], [211.0, 1646.0], [210.0, 1505.0], [208.0, 2338.0], [221.0, 800.0], [220.0, 2147.0], [219.0, 1486.0], [218.0, 1933.0], [230.0, 1352.0], [229.0, 1924.0], [228.0, 1440.0], [227.0, 1749.3333333333333], [239.0, 1680.0], [236.0, 1931.0], [235.0, 1953.0], [233.0, 2189.0], [232.0, 2162.0], [247.0, 2198.0], [246.0, 1918.0], [245.0, 1529.0], [244.0, 1738.5], [242.0, 1812.5], [240.0, 2044.0], [248.0, 171.0], [255.0, 1324.0], [254.0, 1486.0], [253.0, 1746.0], [252.0, 1864.0], [251.0, 1629.5], [249.0, 2172.0], [270.0, 2239.0], [263.0, 311.0], [257.0, 1804.0], [256.0, 1799.0], [259.0, 1311.0], [258.0, 2231.0], [262.0, 1890.5], [260.0, 1716.0], [271.0, 2304.0], [269.0, 2045.0], [268.0, 1950.0], [267.0, 1387.0], [266.0, 1618.0], [265.0, 2023.0], [264.0, 1718.0], [286.0, 1042.0], [287.0, 1664.0], [285.0, 1702.0], [284.0, 2242.0], [283.0, 1798.0], [282.0, 1987.0], [281.0, 1829.0], [280.0, 2275.0], [279.0, 2251.0], [273.0, 2001.0], [272.0, 2026.0], [275.0, 2149.0], [274.0, 2270.0], [278.0, 1730.0], [277.0, 2066.0], [276.0, 1951.0], [301.0, 1536.0], [303.0, 1509.5], [300.0, 1595.0], [291.0, 1371.0], [290.0, 2074.25], [288.0, 1708.0], [299.0, 1839.0], [298.0, 2333.0], [297.0, 1683.0], [296.0, 1426.0], [295.0, 2365.0], [294.0, 2367.0], [293.0, 2368.5], [292.0, 2460.0], [318.0, 1615.0], [319.0, 1554.0], [317.0, 2330.0], [316.0, 2405.0], [315.0, 2364.0], [314.0, 1617.0], [313.0, 1943.4], [312.0, 1589.0], [311.0, 1882.0], [304.0, 2159.0], [306.0, 1793.0], [305.0, 2339.0], [310.0, 1752.0], [309.0, 2167.0], [308.0, 2168.0], [335.0, 2197.5], [329.0, 1215.0], [334.0, 2416.0], [333.0, 1719.0], [332.0, 1929.0], [323.0, 2323.0], [322.0, 1446.0], [321.0, 2359.0], [320.0, 1422.0], [331.0, 1789.6666666666667], [330.0, 1964.0], [328.0, 1473.0], [327.0, 1987.0], [326.0, 2145.0], [325.0, 1821.0], [324.0, 1556.0], [349.0, 339.0], [338.0, 349.0], [341.0, 418.0], [340.0, 1400.0], [343.0, 1848.0], [337.0, 1757.6666666666667], [342.0, 2024.0], [348.0, 1250.0], [339.0, 2075.0], [350.0, 1496.25], [351.0, 1561.0], [347.0, 1915.0], [346.0, 1657.5], [345.0, 2089.5], [344.0, 1688.0], [354.0, 1511.5], [365.0, 2224.5], [357.0, 1094.0], [363.0, 2141.0], [362.0, 1695.3333333333333], [360.0, 2194.0], [359.0, 2003.0], [352.0, 1509.0], [356.0, 1914.0], [355.0, 1843.0], [382.0, 2122.0], [380.0, 2077.0], [371.0, 1832.0], [370.0, 2007.0], [369.0, 1796.0], [368.0, 1967.5], [379.0, 2044.0], [378.0, 2240.0], [377.0, 1854.0], [376.0, 1673.5], [375.0, 2451.0], [374.0, 2135.0], [373.0, 2029.25], [398.0, 998.0], [391.0, 1613.8], [385.0, 2467.0], [384.0, 1859.5], [387.0, 2438.0], [386.0, 2358.0], [395.0, 1337.4], [399.0, 1656.0], [397.0, 1597.0], [396.0, 1978.0], [393.0, 1714.0], [392.0, 2408.0], [390.0, 1992.5], [388.0, 1613.0], [414.0, 2432.0], [409.0, 1010.5], [400.0, 1128.0], [411.0, 1603.6666666666667], [415.0, 1826.7272727272727], [412.0, 2416.6666666666665], [403.0, 2503.0], [402.0, 1766.0], [401.0, 1828.0], [410.0, 1973.0], [408.0, 1685.0], [407.0, 2513.0], [406.0, 2009.0], [405.0, 1703.5], [404.0, 1994.0], [418.0, 597.0], [422.0, 572.0], [416.0, 1791.0], [425.0, 1520.0], [431.0, 2061.3333333333335], [429.0, 1885.7142857142858], [428.0, 2104.5], [419.0, 2000.6], [426.0, 1947.0], [424.0, 1638.0], [421.0, 1987.0], [420.0, 2133.857142857143], [445.0, 2162.0], [446.0, 1865.2], [444.0, 2145.0], [435.0, 1568.0], [434.0, 2033.0], [432.0, 1967.2], [443.0, 2086.4], [441.0, 2102.0], [440.0, 2293.375], [439.0, 1921.3333333333333], [438.0, 2375.5], [437.0, 2078.5], [436.0, 2221.1666666666665], [462.0, 2278.2], [453.0, 1584.0], [452.0, 2696.0], [455.0, 2022.5], [449.0, 1803.0], [448.0, 2504.0], [451.0, 2252.0], [450.0, 2066.272727272727], [454.0, 2047.5], [460.0, 1804.1666666666667], [463.0, 2176.0], [461.0, 2117.375], [459.0, 2012.0], [458.0, 2244.5], [457.0, 1767.0], [456.0, 2132.3636363636365], [478.0, 1935.0], [464.0, 1499.0], [465.0, 2069.4], [471.0, 2084.2], [470.0, 2197.0], [469.0, 1935.0], [468.0, 2050.5], [466.0, 1833.5], [479.0, 2040.5714285714284], [477.0, 2312.5], [476.0, 2158.733333333334], [475.0, 2172.818181818182], [474.0, 1877.0], [473.0, 2164.1428571428573], [494.0, 2352.6666666666665], [482.0, 1904.8333333333335], [485.0, 2036.25], [484.0, 2348.0], [487.0, 2187.4], [481.0, 2606.0], [480.0, 2029.3333333333333], [486.0, 2185.0], [495.0, 1520.75], [493.0, 2130.9285714285716], [492.0, 1230.5], [483.0, 2117.8], [491.0, 2216.5454545454545], [490.0, 2177.4615384615386], [489.0, 2230.4], [488.0, 2126.9615384615386], [499.0, 2192.2948717948716], [500.0, 2091.929531051963], [498.0, 2268.2857142857147], [497.0, 2082.5588235294113], [496.0, 2319.0]], "isOverall": false, "label": "테스트 #2 - local, random, max 1000", "isController": false}, {"data": [[471.4162000000004, 2050.4881999999952]], "isOverall": false, "label": "테스트 #2 - local, random, max 1000-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 12833.766666666666, "minX": 1.69491342E12, "maxY": 23364.633333333335, "series": [{"data": [[1.69491348E12, 19485.45], [1.69491342E12, 12833.766666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69491348E12, 23364.633333333335], [1.69491342E12, 15385.366666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69491348E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1661.7034417727477, "minX": 1.69491342E12, "maxY": 2060.7610810810793, "series": [{"data": [[1.69491348E12, 1863.4574505036453], [1.69491342E12, 1661.7034417727477]], "isOverall": false, "label": "테스트 #1 - local, random, max 500", "isController": false}, {"data": [[1.69491348E12, 2044.4549206349177], [1.69491342E12, 2060.7610810810793]], "isOverall": false, "label": "테스트 #2 - local, random, max 1000", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69491348E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1661.6859971711483, "minX": 1.69491342E12, "maxY": 2060.745405405407, "series": [{"data": [[1.69491348E12, 1863.4452935046893], [1.69491342E12, 1661.6859971711483]], "isOverall": false, "label": "테스트 #1 - local, random, max 500", "isController": false}, {"data": [[1.69491348E12, 2044.4485714285697], [1.69491342E12, 2060.745405405407]], "isOverall": false, "label": "테스트 #2 - local, random, max 1000", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69491348E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.69491342E12, "maxY": 2.0023573785949975, "series": [{"data": [[1.69491348E12, 0.0], [1.69491342E12, 2.0023573785949975]], "isOverall": false, "label": "테스트 #1 - local, random, max 500", "isController": false}, {"data": [[1.69491348E12, 0.0], [1.69491342E12, 0.0]], "isOverall": false, "label": "테스트 #2 - local, random, max 1000", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69491348E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 60.0, "minX": 1.69491342E12, "maxY": 2910.0, "series": [{"data": [[1.69491348E12, 2807.0], [1.69491342E12, 2910.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69491348E12, 2418.0], [1.69491342E12, 2457.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69491348E12, 2665.0999999999995], [1.69491342E12, 2741.119999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69491348E12, 2535.5], [1.69491342E12, 2578.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69491348E12, 62.0], [1.69491342E12, 60.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69491348E12, 1954.0], [1.69491342E12, 1963.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69491348E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 102.0, "minX": 6.0, "maxY": 2174.0, "series": [{"data": [[62.0, 1436.5], [6.0, 102.0], [220.0, 1986.0], [223.0, 2001.0], [227.0, 1889.5], [226.0, 1987.0], [233.0, 1824.5], [235.0, 2087.0], [239.0, 2174.0], [232.0, 2014.0], [247.0, 2050.0], [245.0, 1906.0], [242.0, 1931.0], [244.0, 1970.5], [243.0, 1959.5], [252.0, 1857.0], [248.0, 1958.0], [250.0, 1926.0], [254.0, 2003.0], [253.0, 1958.0], [264.0, 2033.5], [260.0, 2036.5], [265.0, 2104.0], [259.0, 1940.0], [262.0, 1829.5], [266.0, 1962.0], [258.0, 2035.0], [277.0, 849.5], [280.0, 1091.0], [281.0, 1941.0], [276.0, 2088.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 281.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 100.5, "minX": 6.0, "maxY": 2174.0, "series": [{"data": [[62.0, 1436.5], [6.0, 100.5], [220.0, 1986.0], [223.0, 2001.0], [227.0, 1889.5], [226.0, 1987.0], [233.0, 1824.5], [235.0, 2087.0], [239.0, 2174.0], [232.0, 2014.0], [247.0, 2050.0], [245.0, 1906.0], [242.0, 1931.0], [244.0, 1970.5], [243.0, 1959.5], [252.0, 1857.0], [248.0, 1958.0], [250.0, 1926.0], [254.0, 2003.0], [253.0, 1958.0], [264.0, 2033.5], [260.0, 2036.5], [265.0, 2104.0], [259.0, 1940.0], [262.0, 1829.5], [266.0, 1962.0], [258.0, 2035.0], [277.0, 849.5], [280.0, 1091.0], [281.0, 1941.0], [276.0, 2088.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 281.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 74.51666666666667, "minX": 1.69491342E12, "maxY": 92.15, "series": [{"data": [[1.69491348E12, 92.15], [1.69491342E12, 74.51666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69491348E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 66.18333333333334, "minX": 1.69491342E12, "maxY": 100.48333333333333, "series": [{"data": [[1.69491348E12, 100.48333333333333], [1.69491342E12, 66.18333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69491348E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 30.833333333333332, "minX": 1.69491342E12, "maxY": 52.5, "series": [{"data": [[1.69491348E12, 52.5], [1.69491342E12, 30.833333333333332]], "isOverall": false, "label": "테스트 #2 - local, random, max 1000-success", "isController": false}, {"data": [[1.69491348E12, 47.983333333333334], [1.69491342E12, 35.35]], "isOverall": false, "label": "테스트 #1 - local, random, max 500-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69491348E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 66.18333333333334, "minX": 1.69491342E12, "maxY": 100.48333333333333, "series": [{"data": [[1.69491348E12, 100.48333333333333], [1.69491342E12, 66.18333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69491348E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

